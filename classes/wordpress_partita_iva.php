<?php

if ( ! class_exists( 'WordPress_Partita_IVA' ) ) {

	/**
	 * Main / front controller class
	 *
	 *
	 */
	class WordPress_Partita_IVA extends wp_partita_iva_Module {
		protected static $readable_properties  = array();    // These should really be constants, but PHP doesn't allow class constants to be arrays
		protected static $writeable_properties = array();
		protected $modules;

		const VERSION    = '1.0';
        const PREFIX     = 'wp_partita_iva_';
		const DEBUG_MODE = false;


		/*
		 * Magic methods
		 */

		/**
		 * Constructor
		 *
		 * @mvc Controller
		 */
		protected function __construct() {
			$this->register_hook_callbacks();

			$this->modules = array(
				'wp_partita_iva_Settings'    => wp_partita_iva_Settings::get_instance(),
				'wp_partita_iva_Cron'        => wp_partita_iva_Cron::get_instance()
			);
		}


		/*
		 * Static methods
		 */

		/**
		 * Enqueues CSS, JavaScript, etc
		 *
		 * @mvc Controller
		 */
		public static function load_resources() {
			wp_register_script(
				self::PREFIX . 'wordpress_partita_iva',
				plugins_url( 'javascript/wordpress_partita_iva.js', dirname( __FILE__ ) ),
				array( 'jquery' ),
				self::VERSION,
				true
			);

			wp_register_style(
				self::PREFIX . 'admin',
				plugins_url( 'css/admin.css', dirname( __FILE__ ) ),
				array(),
				self::VERSION,
				'all'
			);

			if ( is_admin() ) {
				wp_enqueue_style( self::PREFIX . 'admin' );
			} else {
				wp_enqueue_script( self::PREFIX . 'wordpress_partita_iva' );
			}
		}

		/**
		 * Clears caches of content generated by caching plugins like WP Super Cache
		 *
		 * @mvc Model
		 */
		protected static function clear_caching_plugins() {
			// WP Super Cache
			if ( function_exists( 'wp_cache_clear_cache' ) ) {
				wp_cache_clear_cache();
			}

			// W3 Total Cache
			if ( class_exists( 'W3_Plugin_TotalCacheAdmin' ) ) {
				$w3_total_cache = w3_instance( 'W3_Plugin_TotalCacheAdmin' );

				if ( method_exists( $w3_total_cache, 'flush_all' ) ) {
					$w3_total_cache->flush_all();
				}
			}
		}


		/*
		 * Instance methods
		 */

		/**
		 * Prepares sites to use the plugin during single or network-wide activation
		 *
		 * @mvc Controller
		 *
		 * @param bool $network_wide
		 */
		public function activate( $network_wide ) {
			if ( $network_wide && is_multisite() ) {
				$sites = wp_get_sites( array( 'limit' => false ) );

				foreach ( $sites as $site ) {
					switch_to_blog( $site['blog_id'] );
					$this->single_activate( $network_wide );
					restore_current_blog();
				}
			} else {
				$this->single_activate( $network_wide );
			}
		}

		/**
		 * Runs activation code on a new WPMS site when it's created
		 *
		 * @mvc Controller
		 *
		 * @param int $blog_id
		 */
		public function activate_new_site( $blog_id ) {
			switch_to_blog( $blog_id );
			$this->single_activate( true );
			restore_current_blog();
		}

		/**
		 * Prepares a single blog to use the plugin
		 *
		 * @mvc Controller
		 *
		 * @param bool $network_wide
		 */
		protected function single_activate( $network_wide ) {
			foreach ( $this->modules as $module ) {
				$module->activate( $network_wide );
			}

			flush_rewrite_rules();
		}

		/**
		 * Rolls back activation procedures when de-activating the plugin
		 *
		 * @mvc Controller
		 */
		public function deactivate() {
			foreach ( $this->modules as $module ) {
				$module->deactivate();
			}

			flush_rewrite_rules();
		}

		/**
		 * Register callbacks for actions and filters
		 *
		 * @mvc Controller
		 */
		public function register_hook_callbacks() {
			add_action( 'wp_enqueue_scripts',    __CLASS__ . '::load_resources' );
			add_action( 'admin_enqueue_scripts', __CLASS__ . '::load_resources' );

			add_action( 'wpmu_new_blog',         array( $this, 'activate_new_site' ) );
			add_action( 'init',                  array( $this, 'init' ) );
			add_action( 'init',                  array( $this, 'upgrade' ), 11 );
		}

		/**
		 * Initializes variables
		 *
		 * @mvc Controller
		 */
		public function init() {
			try {
				$instance_ = new wp_partita_iva_Instance_Class( 'Instance ', '42' );
				//add_notice( $instance_->foo .' '. $instance_->bar );
			} catch ( Exception $exception ) {
				add_notice( __METHOD__ . ' error: ' . $exception->getMessage(), 'error' );
			}
		}

		/**
		 * Checks if the plugin was recently updated and upgrades if necessary
		 *
		 * @mvc Controller
		 *
		 * @param string $db_version
		 */
		public function upgrade( $db_version = 0 ) {
			if ( version_compare( $this->modules['wp_partita_iva_Settings']->settings['db-version'], self::VERSION, '==' ) ) {
				return;
			}

			foreach ( $this->modules as $module ) {
				$module->upgrade( $this->modules['wp_partita_iva_Settings']->settings['db-version'] );
			}

			$this->modules['wp_partita_iva_Settings']->settings = array( 'db-version' => self::VERSION );
			self::clear_caching_plugins();
		}

		/**
		 * Checks that the object is in a correct state
		 *
		 * @mvc Model
		 *
		 * @param string $property An individual property to check, or 'all' to check all of them
		 * @return bool
		 */
		protected function is_valid( $property = 'all' ) {
			return true;
		}
    } // end WordPress_Partita_IVA


        /*    Imposto i  nuovi campi custom e li mostro nell'area personale dell'utente (billing address)
        */
        function wp_partita_iva_set_customer_billing_fields_in_profile( $fields )
        {
            $fields['billing_vat'] = array(
                'label' =>  __('Partita IVA', 'woocommerce' ),
                'placeholder' => '',
                'required' => false,
                'clear' => false,
                'type' => 'text',
                'class' => array('form-row-wide')
            );

            $fields['billing_nin'] = array(
                'label' =>  __('Codice Fiscale', 'woocommerce' ),
                'placeholder' => '',
                'required' => false,
                'clear' => false,
                'type' => 'text',
                'class' => array('form-row-wide')
            );

            $fields['billing_uni'] = array(
            'label' =>  __('Codice Univoco', 'woocommerce' ),
            'placeholder' => '',
            'required' => false,
            'clear' => false,
            'type' => 'text',
            'class' => array('form-row-wide')
        );
            $fields['billing_pec'] = array(
                'label' =>  __('Indirizzo PEC', 'woocommerce' ),
                'placeholder' => '',
                'required' => false,
                'clear' => false,
                'type' => 'text',
                'class' => array('form-row-wide')
            );

            return $fields;
        }

    add_filter('woocommerce_billing_fields', 'wp_partita_iva_set_customer_billing_fields_in_profile');


        /*    Mostro i campi custom nella pagina di checkout
        */
        function wp_partita_iva_set_customer_billing_fields_in_checkout( $fields )
        {            $required = 'true';

            $fields['billing']['billing_vat'] = array(
                'label' =>  __('Partita IVA', 'woocommerce' ),
                'placeholder' => '',
                'required'  => $required ,
                'clear' => false,
                'type' => 'text',
                'class' => array('form-row-wide')
            );

            $fields['billing']['billing_nin'] = array(
                'label' =>  __('Codice Fiscale', 'woocommerce' ),
                'placeholder' => '',
                'required' => false,
                'clear' => false,
                'type' => 'text',
                'class' => array('form-row-wide')
            );

            $fields['billing']['billing_uni'] = array(
                'label' =>  __('Codice Univoco', 'woocommerce' ),
                'placeholder' => '',
                'required' => false,
                'clear' => false,
                'type' => 'text',
                'class' => array('form-row-wide')
            );

            $fields['billing']['billing_pec'] = array(
                'label' =>  __('Indirizzo PEC', 'woocommerce' ),
                'placeholder' => '',
                'required' => false,
                'clear' => false,
                'type' => 'text',
                'class' => array('form-row-wide')
            );

            return $fields;
        }
    add_filter('woocommerce_checkout_fields', 'wp_partita_iva_set_customer_billing_fields_in_checkout');


        /*    Mostro i campi custom nel profilo dell'utente lato amministrazione
        */
        function wp_partita_iva_set_customer_billing_fields_in_customer_profile_admin_side( $fields )
        {
            $fields['billing']['fields']['billing_vat'] = array(
                'label' => __( 'Partita IVA', 'woocommerce' ),
                'description'  => ''
            );

            $fields['billing']['fields']['billing_nin'] = array(
                'label' => __( 'Codice Fiscale', 'woocommerce' ),
                'description'  => ''
            );

            $fields['billing']['fields']['billing_uni'] = array(
                'label' => __( 'Codice Univoco', 'woocommerce' ),
                'description'  => ''
            );

            $fields['billing']['fields']['billing_pec'] = array(
            'label' => __( 'Indirizzo PEC', 'woocommerce' ),
            'description'  => ''
        );

            return $fields;
        }
    add_filter( 'woocommerce_customer_meta_fields', 'wp_partita_iva_set_customer_billing_fields_in_customer_profile_admin_side' );


        /*    Compilo con i dati del profilo (billing address) i campi custom nel checkout
        */
        function wp_partita_iva_populate_customer_billing_fields_in_checkout( $input, $key )
        {
            global $current_user;

            if ( $key == 'billing_vat' )
                return get_user_meta( $current_user->ID, 'billing_vat', true );

            if ( $key == 'billing_nin' )
                return get_user_meta( $current_user->ID, 'billing_nin', true );

            if ( $key == 'billing_uni' )
                return get_user_meta( $current_user->ID, 'billing_uni', true );

            if ( $key == 'billing_pec' )
                return get_user_meta( $current_user->ID, 'billing_pec', true );
        }
    add_filter('woocommerce_checkout_get_value', 'wp_partita_iva_populate_customer_billing_fields_in_checkout', 10, 2 );


        /*    Salvo le modifiche sui campi custom effettuate dall'area personale dell'utente (billing address)
        */
        function wp_partita_iva_store_customer_billing_fields_in_address( $user_id )
        {
            if ( ! empty( $_POST['billing_vat'] ) )
                update_user_meta( $user_id, 'billing_vat', sanitize_text_field( $_POST[ 'billing_vat' ] ) );

            if ( ! empty( $_POST['billing_nin'] ) )
                update_user_meta( $user_id, 'billing_nin', sanitize_text_field( $_POST[ 'billing_nin' ] ) );

            if ( ! empty( $_POST['billing_uni'] ) )
                update_user_meta( $user_id, 'billing_uni', sanitize_text_field( $_POST[ 'billing_uni' ] ) );

            if ( ! empty( $_POST['billing_pec'] ) )
                update_user_meta( $user_id, 'billing_pec', sanitize_text_field( $_POST[ 'billing_pec' ] ) );

            if ( empty( $_POST[ 'billing_nin' ] ) && empty( $_POST[ 'billing_vat' ] ) )
                wc_add_notice( __( 'Devi inserire un Codice Fiscale o una Partita IVA.' ), 'error' );

            if ( empty( $_POST[ 'billing_pec' ] ) && empty( $_POST[ 'billing_uni' ] ) )
                wc_add_notice( __( 'Devi inserire un Codice Cliente o una casella di Posta Elettronica Certificata.' ), 'error' );
        }
    add_action( 'woocommerce_customer_save_address', 'wp_partita_iva_store_customer_billing_fields_in_address' );


        /*    Salvo le modifiche sui campi custom effettuate nel checkout dell'utente
        */
        function wp_partita_iva_store_customer_billing_fields_in_checkout( $user_id )
        {
            if ( ! empty( $_POST['billing_vat'] ) )
                update_user_meta( $user_id, 'billing_vat', sanitize_text_field( $_POST[ 'billing_vat' ] ) );

            if ( ! empty( $_POST['billing_nin'] ) )
                update_user_meta( $user_id, 'billing_nin', sanitize_text_field( $_POST[ 'billing_nin' ] ) );

            if ( ! empty( $_POST['billing_uni'] ) )
                update_user_meta( $user_id, 'billing_uni', sanitize_text_field( $_POST[ 'billing_uni' ] ) );

            if ( ! empty( $_POST['billing_pec'] ) )
                update_user_meta( $user_id, 'billing_pec', sanitize_text_field( $_POST[ 'billing_pec' ] ) );
        }
    add_action( 'woocommerce_checkout_update_user_meta', 'wp_partita_iva_store_customer_billing_fields_in_checkout' );


        /*    Valido le modifiche sui campi custom effettuate nel checkout dell'utente.
        *     Almeno uno dei due campi deve essere compilato.
        */
        function wp_partita_iva_validate_customer_billing_fields_in_checkout()
        {
            $billing_vat = trim( $_POST['billing_vat'] );
            $billing_nin = trim( $_POST['billing_nin'] );
            $billing_uni = trim( $_POST['billing_uni'] );
            $billing_pec = trim( $_POST['billing_pec'] );

            if ( empty( $billing_vat ) && empty( $billing_nin ) )
                wc_add_notice( __( 'You must insert a Codice Fiscale or Vat Code.' ), 'error' );
            if ( empty( $billing_uni ) && empty( $billing_pec ) )
                wc_add_notice( __( 'Devi inserire un Codice Cliente o una casella di Posta Elettronica Certificata.' ), 'error' );
        }
    add_action('woocommerce_checkout_process', 'wp_partita_iva_validate_customer_billing_fields_in_checkout');


        /*    Aggiungo campi custom nel riepilogo ordine
        */
        function wp_partita_iva_add_customer_billing_fields_in_admin_order_meta( $order )
        {
            $orderid=$order->get_id();
            $billing_vat = get_user_meta( $order->get_user_id(), 'billing_vat', true );
            $order_billing_vat = get_post_meta( $orderid, '_billing_vat', true );

            $billing_nin = get_user_meta( $order->get_user_id(), 'billing_nin', true );
            $order_billing_nin = get_post_meta( $orderid, '_billing_nin', true );

            $billing_uni = get_user_meta( $order->get_user_id(), 'billing_uni', true );
            $order_billing_uni = get_post_meta( $orderid, '_billing_uni', true );

            $billing_pec = get_user_meta( $order->get_user_id(), 'billing_pec', true );
            $order_billing_pec = get_post_meta( $orderid, '_billing_pec', true );


            $client_vat_label  = '<p><strong>' . __('Partita IVA', 'woocommerce' ) .' </strong><br>';
        $client_vat_label .= ( $billing_vat ) ? '(From Billing Address)' . $billing_vat : ( $order_billing_vat ) ? '(From Order Note)' . $order_billing_vat : 'N/D' ;
        echo $client_vat_label . '</p>';

        $billing_nin_label  = '<p><strong>' . __('Codice Fiscale', 'woocommerce' ) . '</strong><br>';
        $billing_nin_label .= ( $billing_nin ) ? $billing_nin : ( $order_billing_nin ) ? $order_billing_nin : 'N/D' ;
        echo $billing_nin_label . '</p>';

            $billing_uni_label  = '<p><strong>' . __('Codice Univoco', 'woocommerce' ) . '</strong><br>';
            $billing_uni_label .= ( $billing_uni ) ? $billing_uni : ( $order_billing_uni ) ? $order_billing_uni : 'N/D' ;
            echo $billing_uni_label . '</p>';

            $billing_pec_label  = '<p><strong>' . __('Indirizzo PEC', 'woocommerce' ) . '</strong><br>';
            $billing_pec_label .= ( $billing_pec ) ? $billing_pec : ( $order_billing_pec ) ? $order_billing_pec : 'N/D' ;
            echo $billing_pec_label . '</p>';
    }
    add_action( 'woocommerce_admin_order_data_after_billing_address', 'wp_partita_iva_add_customer_billing_fields_in_admin_order_meta', 10, 1 );


        /*    Salvataggio campi fattura elettronica se utente non chiede di registrarsi (ospite)
        */
        function wp_partita_iva_before_checkout_create_order( $order )
        {   //$order_id = $order->get_id();
            $billing_pec = trim( $_POST['billing_pec'] );
            $billing_uni = trim( $_POST['billing_uni'] );

            update_post_meta( $order->id, '_billing_uni', sanitize_text_field( $billing_uni ) );
            update_post_meta( $order->id, '_billing_pec', sanitize_text_field( $billing_pec ) );
        }
    add_action('woocommerce_checkout_update_order_meta', 'wp_partita_iva_before_checkout_create_order');

}
